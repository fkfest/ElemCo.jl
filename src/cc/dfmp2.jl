"""
    calc_dfmp2(EC::ECInfo)

  Perform density-fitted MP2 calculation.
  If `save` is set in [`CcOptions.save`](@ref ECInfos.CcOptions), save T2 amplitudes to 
  `save`*"_2" file.

  Args:
    EC: ECInfo object

  Returns:
    OutDict with keys "E", "ESS", "EOS", "EO" for MP2 correlation energy, SS, OS, and O contributions.
"""
function calc_dfmp2(EC::ECInfo)
  t1 = time_ns()
  print_info("DF-MP2")
  savet2 = !isempty(EC.options.cc.save)
  SP = EC.space
  cMO = load_orbitals(EC, EC.options.wf.orb)
  if !is_restricted(cMO) || SP['o'] != SP['O']
    error("Unrestricted orbitals not supported in DF-MP2. Call DF-UMP instead.")
  end
  c_Am = cMO[1]
  nA = size(c_Am, 1)
  c_Ao = c_Am[:,SP['o']]
  c_Av = c_Am[:,SP['v']]
  nocc = length(SP['o'])
  nvir = length(SP['v'])
  C_PL = load2idx(EC, "C_PL")
  nL = size(C_PL, 2)
  Lvo = zeros(nL, nvir, nocc)
  bao = generate_basis(EC, "ao")
  bfit = generate_basis(EC, "mpfit")
  Pbatches = BasisBatcher(bao, bfit)
  maxP = max_batch_length(Pbatches)
  lenbuf = auto_calc_buffer_length4calc_dfmp2(nocc, nvir, nA, nL, maxP, nocc)
  buf = Buffer(lenbuf)
  # @print_buffer_usage buf begin
  lencbuf = buffer_size_3idx(Pbatches)
  cbuf = Buffer{Cdouble}(lencbuf)
  for Pblk in Pbatches
    P = range(Pblk)
    lenP = length(P)
    oAP = alloc!(buf, nocc, nA, lenP)
    AAP = alloc!(buf, nA, nA, lenP)
    eri_2e3idx!(AAP, cbuf, Pblk)
    n!oAP = neuralyze(oAP)
    @mtensor n!oAP[i,ν,P] = c_Ao[μ,i] * AAP[μ,ν,P]
    drop!(buf, AAP)
    voP = alloc!(buf, nvir, nocc, lenP)
    n!voP = neuralyze(voP)
    @mtensor n!voP[a,i,P] = c_Av[ν,a] * oAP[i,ν,P]
    M_PL = alloc!(buf, lenP, nL)
    M_PL .= @view C_PL[P,:]
    @mtensor Lvo[L,a,i] += voP[a,i,P] * M_PL[P,L]
    drop!(buf, oAP, voP, M_PL)
  end
  cbuf = nothing
  t1 = print_time(EC, t1, "DF-MP2: 3-index integrals", 1)
  # Compute MP2 energy
  eps = load1idx(EC, "e_m")
  ϵo = eps[SP['o']]
  ϵv = eps[SP['v']]
  if savet2
    t2filename, description = save_or_start_file(EC, "T", 2)
    t2filename *= "_2"
    description *= " MP2"
    T2file, T2 = newmmap(EC, t2filename, (nvir,nvir,nocc,nocc); description)
    println("Save doubles amplitudes to file $t2filename")
  end
  EMP2d = 0.0
  EMP2ex = 0.0
  EMP2diag = 0.0
  for j = 1:nocc
    irange = 1:j
    leni = length(irange)
    v!Lvj = @view Lvo[:,:,j]
    v!Lvi = @view Lvo[:,:,irange]
    vvij = alloc!(buf, nvir, nvir, leni)
    @mtensor vvij[a,b,i] = v!Lvi[L,a,i] * v!Lvj[L,b]
    t_vvij = alloc!(buf, nvir, nvir, leni)
    eij = alloc!(buf, leni)
    eij .= ϵo[irange] .+ ϵo[j]
    for abi ∈ CartesianIndices(vvij)
      a, b, i = Tuple(abi)
      t_vvij[abi] = vvij[abi] / (ϵo[i] + ϵo[j] - ϵv[a] - ϵv[b])
    end
    drop!(buf, eij)
    if leni > 1
      v!vvij = @view vvij[:,:,1:leni-1]
      v!t_vvij = @view t_vvij[:,:,1:leni-1]
      @mtensor EMP2d += v!vvij[a,b,i] * v!t_vvij[a,b,i]
      @mtensor EMP2ex += v!vvij[a,b,i] * v!t_vvij[b,a,i]
    end
    v!vvii = @view vvij[:,:,j]
    v!t_vvii = @view t_vvij[:,:,j]
    @mtensor EMP2diag += v!vvii[a,b] * v!t_vvii[a,b]
    drop!(buf, vvij, t_vvij)
    if savet2
      T2[:,:,irange,j] .= t_vvij
      permutedims!(@view(T2[:,:,j,irange]), t_vvij, (2,1,3))
    end
  end
  if savet2
    closemmap(EC, T2file, T2)
  end
  t1 = print_time(EC, t1, "energy calculation", 1)
  # end # print_buffer_usage
  EMP2SS = 2*EMP2d - 2*EMP2ex
  EMP2OS = 2*EMP2d + EMP2diag
  EMP2 = EMP2SS + EMP2OS
  return OutDict("E"=>EMP2, "ESS"=>EMP2SS, "EOS"=>EMP2OS, "EO"=>0.0)
end

# Function to calculate length for buffer(s) buf
# autogenerated by @print_buffer_usage
function auto_calc_buffer_length4calc_dfmp2(nocc, nvir, nA, nL, lenP, leni)
    buf = [0, 0]
    begin
        oAP = pseudo_alloc!(buf, nocc, nA, lenP)
        AAP = pseudo_alloc!(buf, nA, nA, lenP)
        pseudo_drop!(buf, AAP)
        voP = pseudo_alloc!(buf, nvir, nocc, lenP)
        M_PL = pseudo_alloc!(buf, lenP, nL)
        pseudo_drop!(buf, oAP, voP, M_PL)
    end
    begin
        vvij = pseudo_alloc!(buf, nvir, nvir, leni)
        t_vvij = pseudo_alloc!(buf, nvir, nvir, leni)
        eij = pseudo_alloc!(buf, leni)
        pseudo_drop!(buf, eij)
        pseudo_drop!(buf, vvij, t_vvij)
    end
    return buf[2]
end